// <auto-generated />
using System;
using LibraryHub.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LibraryHub.DataAccess.Migrations
{
    [DbContext(typeof(LibraryHubDbContext))]
    [Migration("20250523085833_InitLibraryHubDb")]
    partial class InitLibraryHubDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LibraryHub.Domain.Entities.Author", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a1b2c3d4-5678-4e8f-8a9b-cdef01234567"),
                            Name = "J.K. Rowling"
                        },
                        new
                        {
                            Id = new Guid("b2c3d4e5-6789-4f9a-8b0c-def012345678"),
                            Name = "George R.R. Martin"
                        },
                        new
                        {
                            Id = new Guid("c3d4e5f6-7890-4a1b-9c2d-ef0123456789"),
                            Name = "Stephen King"
                        });
                });

            modelBuilder.Entity("LibraryHub.Domain.Entities.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b1d2e3f4-5678-4a9b-8c0d-ef1234567890"),
                            AuthorId = new Guid("a1b2c3d4-5678-4e8f-8a9b-cdef01234567"),
                            Category = 0,
                            ISBN = "9780747532743",
                            Title = "Harry Potter and the Philosopher's Stone"
                        },
                        new
                        {
                            Id = new Guid("2d3e4f56-7890-4b1c-9d2e-0f3456789abc"),
                            AuthorId = new Guid("b2c3d4e5-6789-4f9a-8b0c-def012345678"),
                            Category = 0,
                            ISBN = "9780553103540",
                            Title = "A Game of Thrones"
                        },
                        new
                        {
                            Id = new Guid("3e4f5678-90ab-4c2d-9e3f-10456789abc0"),
                            AuthorId = new Guid("c3d4e5f6-7890-4a1b-9c2d-ef0123456789"),
                            Category = 0,
                            ISBN = "9780307743657",
                            Title = "The Shining"
                        },
                        new
                        {
                            Id = new Guid("4f567890-abcd-4d3e-8f40-2156789abcde"),
                            AuthorId = new Guid("a1b2c3d4-5678-4e8f-8a9b-cdef01234567"),
                            Category = 0,
                            ISBN = "9780439064873",
                            Title = "Harry Potter and the Chamber of Secrets"
                        },
                        new
                        {
                            Id = new Guid("567890ab-cdef-4e4f-9051-326789abcdef"),
                            AuthorId = new Guid("b2c3d4e5-6789-4f9a-8b0c-def012345678"),
                            Category = 0,
                            ISBN = "9780553108033",
                            Title = "A Clash of Kings"
                        },
                        new
                        {
                            Id = new Guid("67890abc-def0-4f50-9162-43789abcdef0"),
                            AuthorId = new Guid("c3d4e5f6-7890-4a1b-9c2d-ef0123456789"),
                            Category = 0,
                            ISBN = "9781501175460",
                            Title = "It"
                        },
                        new
                        {
                            Id = new Guid("7890abc1-ef01-4061-9273-5489abcdef01"),
                            AuthorId = new Guid("a1b2c3d4-5678-4e8f-8a9b-cdef01234567"),
                            Category = 0,
                            ISBN = "9780439136365",
                            Title = "Harry Potter and the Prisoner of Azkaban"
                        },
                        new
                        {
                            Id = new Guid("890abc23-f012-4172-9384-659abcdef012"),
                            AuthorId = new Guid("b2c3d4e5-6789-4f9a-8b0c-def012345678"),
                            Category = 0,
                            ISBN = "9780553106633",
                            Title = "A Storm of Swords"
                        },
                        new
                        {
                            Id = new Guid("90abc345-0123-4283-9495-76abcdef0123"),
                            AuthorId = new Guid("c3d4e5f6-7890-4a1b-9c2d-ef0123456789"),
                            Category = 0,
                            ISBN = "9780307947307",
                            Title = "The Stand"
                        },
                        new
                        {
                            Id = new Guid("0abc4567-1234-4394-9506-87bcdef01234"),
                            AuthorId = new Guid("a1b2c3d4-5678-4e8f-8a9b-cdef01234567"),
                            Category = 0,
                            ISBN = "9780439139601",
                            Title = "Harry Potter and the Goblet of Fire"
                        });
                });

            modelBuilder.Entity("LibraryHub.Domain.Entities.Loan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LoanDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("Loans");
                });

            modelBuilder.Entity("LibraryHub.Domain.Entities.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = new Guid("771ce9d9-7757-4c61-8cc0-c66d97338750"),
                            BookId = new Guid("b1d2e3f4-5678-4a9b-8c0d-ef1234567890"),
                            Comment = "Loved it!",
                            Rating = 5,
                            ReviewDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("f47ac10b-58cc-4372-a567-0e02b2c3d479")
                        },
                        new
                        {
                            Id = new Guid("de443778-cf98-4a9f-bb27-e5d81f94afd9"),
                            BookId = new Guid("b1d2e3f4-5678-4a9b-8c0d-ef1234567890"),
                            Comment = "Great book!",
                            Rating = 4,
                            ReviewDate = new DateTime(2023, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed")
                        },
                        new
                        {
                            Id = new Guid("1eefff06-d222-4724-ac79-9ece80a2a3e0"),
                            BookId = new Guid("2d3e4f56-7890-4b1c-9d2e-0f3456789abc"),
                            Comment = "Amazing!",
                            Rating = 5,
                            ReviewDate = new DateTime(2023, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("68af4068-8e5a-4d7c-bc6e-9da9b0f41f9e")
                        },
                        new
                        {
                            Id = new Guid("658d06ca-e0a9-40b3-8998-48ede1753c55"),
                            BookId = new Guid("3e4f5678-90ab-4c2d-9e3f-10456789abc0"),
                            Comment = "It was okay.",
                            Rating = 3,
                            ReviewDate = new DateTime(2023, 1, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("2a35e6f1-4a6d-4e8f-8a9b-cdef01234567")
                        },
                        new
                        {
                            Id = new Guid("3b746939-cbbc-49ba-a4b9-c6a2a4d19891"),
                            BookId = new Guid("4f567890-abcd-4d3e-8f40-2156789abcde"),
                            Comment = "Very good!",
                            Rating = 4,
                            ReviewDate = new DateTime(2023, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("9c8b7a6d-5e4f-4a3b-2c1d-0e9f8a7b6c5d")
                        },
                        new
                        {
                            Id = new Guid("cc281e3d-14d2-43fd-a20b-ce5c52ee61ae"),
                            BookId = new Guid("567890ab-cdef-4e4f-9051-326789abcdef"),
                            Comment = "Excellent!",
                            Rating = 5,
                            ReviewDate = new DateTime(2023, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("f47ac10b-58cc-4372-a567-0e02b2c3d479")
                        },
                        new
                        {
                            Id = new Guid("7145505f-fe6a-4eb7-a430-6512aa8e1587"),
                            BookId = new Guid("67890abc-def0-4f50-9162-43789abcdef0"),
                            Comment = "Really enjoyed it.",
                            Rating = 4,
                            ReviewDate = new DateTime(2023, 1, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed")
                        },
                        new
                        {
                            Id = new Guid("c2e279e7-f5d6-45bc-959a-295c8aeaac7f"),
                            BookId = new Guid("7890abc1-ef01-4061-9273-5489abcdef01"),
                            Comment = "Fantastic!",
                            Rating = 5,
                            ReviewDate = new DateTime(2023, 1, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("68af4068-8e5a-4d7c-bc6e-9da9b0f41f9e")
                        },
                        new
                        {
                            Id = new Guid("bf3b9d1f-921a-4631-bfed-084f10e15e23"),
                            BookId = new Guid("890abc23-f012-4172-9384-659abcdef012"),
                            Comment = "Not bad.",
                            Rating = 3,
                            ReviewDate = new DateTime(2023, 1, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("2a35e6f1-4a6d-4e8f-8a9b-cdef01234567")
                        },
                        new
                        {
                            Id = new Guid("254b8516-274b-42c6-82d9-b3f1062f741c"),
                            BookId = new Guid("90abc345-0123-4283-9495-76abcdef0123"),
                            Comment = "Very interesting!",
                            Rating = 4,
                            ReviewDate = new DateTime(2023, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("9c8b7a6d-5e4f-4a3b-2c1d-0e9f8a7b6c5d")
                        },
                        new
                        {
                            Id = new Guid("5b9de827-c14e-4092-b71f-884814917a4c"),
                            BookId = new Guid("0abc4567-1234-4394-9506-87bcdef01234"),
                            Comment = "A must-read!",
                            Rating = 5,
                            ReviewDate = new DateTime(2023, 1, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("f47ac10b-58cc-4372-a567-0e02b2c3d479")
                        });
                });

            modelBuilder.Entity("LibraryHub.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f47ac10b-58cc-4372-a567-0e02b2c3d479"),
                            Email = "homer@simpson.com",
                            Name = "Homer Simpson"
                        },
                        new
                        {
                            Id = new Guid("1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed"),
                            Email = "peter@griffin.com",
                            Name = "Peter Griffin"
                        },
                        new
                        {
                            Id = new Guid("68af4068-8e5a-4d7c-bc6e-9da9b0f41f9e"),
                            Email = "rick@sanchez.com",
                            Name = "Rick Sanchez"
                        },
                        new
                        {
                            Id = new Guid("2a35e6f1-4a6d-4e8f-8a9b-cdef01234567"),
                            Email = "leslie@knope.com",
                            Name = "Leslie Knope"
                        },
                        new
                        {
                            Id = new Guid("9c8b7a6d-5e4f-4a3b-2c1d-0e9f8a7b6c5d"),
                            Email = "michael@scott.com",
                            Name = "Michael Scott"
                        });
                });

            modelBuilder.Entity("LibraryHub.Domain.Entities.Book", b =>
                {
                    b.HasOne("LibraryHub.Domain.Entities.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("LibraryHub.Domain.Entities.Loan", b =>
                {
                    b.HasOne("LibraryHub.Domain.Entities.Book", "Book")
                        .WithMany("Loans")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryHub.Domain.Entities.User", "User")
                        .WithMany("Loans")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LibraryHub.Domain.Entities.Review", b =>
                {
                    b.HasOne("LibraryHub.Domain.Entities.Book", "Book")
                        .WithMany("Reviews")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryHub.Domain.Entities.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LibraryHub.Domain.Entities.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("LibraryHub.Domain.Entities.Book", b =>
                {
                    b.Navigation("Loans");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("LibraryHub.Domain.Entities.User", b =>
                {
                    b.Navigation("Loans");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
